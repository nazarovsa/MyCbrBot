using System.Globalization;
using System.Text;
using Insight.Cbr;
using Insight.TelegramBot;
using Insight.TelegramBot.Models;
using Microsoft.Extensions.Logging;
using MyCbrBot.Core.Dates;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace MyCbrBot.Domain.TelegramBot;

public sealed class UpdateProcessor : IUpdateProcessor
{
    // TODO: Add logs!
    private readonly ILogger<UpdateProcessor> _logger;
    private readonly ICurrencyService _currencyService;
    private readonly IBot _bot;
    private readonly IDateTimeProvider _dateTimeProvider;

    public UpdateProcessor(ILogger<UpdateProcessor> logger,
        ICurrencyService currencyService,
        IBot bot,
        IDateTimeProvider dateTimeProvider)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _currencyService = currencyService ?? throw new ArgumentNullException(nameof(currencyService));
        _bot = bot ?? throw new ArgumentNullException(nameof(bot));
        _dateTimeProvider = dateTimeProvider ?? throw new ArgumentNullException(nameof(dateTimeProvider));
    }

    public async Task ProcessUpdate(Update update, CancellationToken cancellationToken = new CancellationToken())
    {
        switch (update.Type)
        {
            case UpdateType.Message:
                if (update.Message.Text.Equals("/start"))
                {
                    await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
                    {
                        Text =
                            "–ü—Ä–∏–≤–µ—Ç, –Ø - ü§ñ MyCbrBot!\n–Ø –º–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç üí≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–≤–∫–µ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É."
                    }, cancellationToken);
                }
                else if (update.Message.Text.Equals("/help"))
                {
                    await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
                    {
                        Text =
                            @"–Ø –º–æ–≥—É –ø—Ä–∏—Å–ª–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–≤–∫–µ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É '/today'. –ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫—É—Ä—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã, –¥–æ–±–∞–≤—å—Ç–µ –µ–µ –∫–æ–¥ –∏–ª–∏ ISO –∫–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
–ù–∞–ø—Ä–∏–º–µ—Ä, '/today usd' –∏–ª–∏ '/today 840' –≤–µ—Ä–Ω—É—Ç –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ –¥–∞—Ç—É –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É 'date' c –¥–∞—Ç–æ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.MM.yyyy –∏–ª–∏ dd-MM-yyyy. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å '/today' –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫—É—Ä—Å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç–µ, –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –µ–µ –∫–æ–¥ –∏–ª–∏ ISO –∫–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –¥–∞—Ç—ã.
–ù–∞–ø—Ä–∏–º–µ—Ä, '/date 01.01.2020' –≤–µ—Ä–Ω–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ 01.01.2020 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. '/date 01.01.2020 840' –∏–ª–∏ '/date 01.01.2020 usd' –≤–µ—Ä–Ω—É—Ç –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –Ω–∞ 01.01.2020."
                    }, cancellationToken);
                }
                else if (update.Message.Text.StartsWith("/today"))
                {
                    var args = update.Message.Text
                        .Trim()
                        .Remove(0, "/today".Length)
                        .Trim();

                    var rates = await _currencyService.GetCurrencyRatesToDate(
                        _dateTimeProvider.UtcDateTime.AddHours(3),
                        cancellationToken);

                    if (rates == null)
                    {
                        await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
                        {
                            Text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üòî"
                        }, cancellationToken);
                        return;
                    }

                    var sb = new StringBuilder();
                    if (string.IsNullOrWhiteSpace(args))
                    {
                        sb.Append("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üí≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n");
                        foreach (var rate in rates)
                            sb.Append($"<b>{rate.Name} ({rate.Code} - {rate.IsoCode})</b>: {rate.Par} - {rate.Rate}\n");

                        await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
                        {
                            Text = sb.ToString(),
                            ParseMode = ParseMode.Html
                        }, cancellationToken);
                    }
                    else
                    {
                        sb.Append("–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã üí≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n");
                        var rate = rates.FirstOrDefault(x =>
                            args.Equals(x.IsoCode, StringComparison.InvariantCultureIgnoreCase) ||
                            args.Equals(x.Name, StringComparison.InvariantCultureIgnoreCase) ||
                            args.Equals(x.Code, StringComparison.InvariantCultureIgnoreCase));

                        if (rate == null)
                            sb.Append($"–í–∞–ª—é—Ç–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòî: {args}");
                        else
                            sb.Append($"<b>{rate.Name} ({rate.Code} - {rate.IsoCode})</b>: {rate.Par} - {rate.Rate}");

                        await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
                        {
                            Text = sb.ToString(),
                            ParseMode = ParseMode.Html
                        }, cancellationToken);
                    }
                }
                else if (update.Message.Text.StartsWith("/date"))
                {
                    var args = update.Message.Text
                        .Trim()
                        .Remove(0, "/date".Length)
                        .Trim()
                        .Split();

                    if (args.Length == 0)
                    {
                        await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
                        {
                            Text =
                                "–í–≤–µ–¥–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ üòî: '/date –¥–∞—Ç–∞' –∏–ª–∏ '/date –¥–∞—Ç–∞ –∫–æ–¥_–≤–∞–ª—é—Ç—ã'.",
                            ParseMode = ParseMode.Html
                        }, cancellationToken);
                        return;
                    }

                    if (!DateTime.TryParseExact(args.First(), new[] { "dd-MM-yyyy", "dd.MM.yyyy" }, null,
                            DateTimeStyles.None, out var date))
                    {
                        await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
                        {
                            Text =
                                "–ü–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ üòî: 'dd-MM-yyyy' –∏–ª–∏ 'dd.MM.yyyy'"
                        }, cancellationToken);
                        return;
                    }

                    if (date.Date > _dateTimeProvider.UtcDateTime.Date.AddHours(3).Date)
                    {
                        await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
                        {
                            Text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫—É—Ä—Å –Ω–∞ –±—É–¥—É—â—É—é –¥–∞—Ç—É. ‚òπÔ∏è"
                        }, cancellationToken);
                        return;
                    }

                    var rates = await _currencyService.GetCurrencyRatesToDate(
                        date,
                        cancellationToken);

                    if (rates == null)
                    {
                        await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
                        {
                            Text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üòî"
                        }, cancellationToken);
                        return;
                    }

                    var sb = new StringBuilder();
                    if (args.Length == 1)
                    {
                        sb.Append($"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üí≤ –Ω–∞ {date:dd-MM-yyyy}:\n");
                        foreach (var rate in rates)
                            sb.Append($"<b>{rate.Name} ({rate.Code} - {rate.IsoCode})</b>: {rate.Par} - {rate.Rate}\n");

                        await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
                        {
                            Text = sb.ToString(),
                            ParseMode = ParseMode.Html
                        }, cancellationToken);
                    }
                    else if (args.Length == 2)
                    {
                        sb.Append($"–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã üí≤ –Ω–∞ {date:dd-MM-yyyy}:\n");
                        var rate = rates.FirstOrDefault(x =>
                            args.Last().Equals(x.IsoCode, StringComparison.InvariantCultureIgnoreCase) ||
                            args.Last().Equals(x.Name, StringComparison.InvariantCultureIgnoreCase) ||
                            args.Last().Equals(x.Code, StringComparison.InvariantCultureIgnoreCase));

                        if (rate == null)
                            sb.Append($"–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã üí≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.Last()}");
                        else
                            sb.Append($"<b>{rate.Name} ({rate.Code} - {rate.IsoCode})</b>: {rate.Par} - {rate.Rate}");

                        await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
                        {
                            Text = sb.ToString(),
                            ParseMode = ParseMode.Html
                        }, cancellationToken);
                    }
                    else
                    {
                        await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
                        {
                            Text =
                                "–í–≤–µ–¥–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ üòî: '/date –¥–∞—Ç–∞' –∏–ª–∏ '/date –¥–∞—Ç–∞ –∫–æ–¥_–≤–∞–ª—é—Ç—ã'.",
                            ParseMode = ParseMode.Html
                        }, cancellationToken);
                    }
                }

                break;
            default:
                throw new NotImplementedException();
        }
    }
}