using System.Globalization;
using System.Text;
using Insight.TelegramBot;
using Insight.TelegramBot.Handling.Handlers;
using Insight.TelegramBot.Models;
using MyCbrBot.Core.Dates;
using MyCbrBot.Domain.Services;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace MyCbrBot.Domain.Handlers.DateMessage;

public sealed class DateMessageHandler : IMatchingUpdateHandler<DateMessageMatcher>
{
    private readonly IBot _bot;
    private readonly ICachingCurrencyService _currencyService;
    private readonly IDateTimeProvider _dateTimeProvider;

    public DateMessageHandler(IBot bot,
        ICachingCurrencyService currencyService,
        IDateTimeProvider dateTimeProvider)
    {
        _bot = bot ?? throw new ArgumentNullException(nameof(bot));
        _currencyService = currencyService ?? throw new ArgumentNullException(nameof(currencyService));
        _dateTimeProvider = dateTimeProvider ?? throw new ArgumentNullException(nameof(dateTimeProvider));
    }

    public async Task Handle(Update update, CancellationToken cancellationToken = default)
    {
        var args = update.Message!
            .Text!
            .Replace("/date", string.Empty)
            .Trim()
            .Split(' ');

        if (args.Length == 0)
        {
            await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
            {
                Text =
                    "–í–≤–µ–¥–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ üòî: '/date –¥–∞—Ç–∞' –∏–ª–∏ '/date –¥–∞—Ç–∞ –∫–æ–¥_–≤–∞–ª—é—Ç—ã'.",
                ParseMode = ParseMode.Html
            }, cancellationToken);
            return;
        }

        if (!DateTime.TryParseExact(args.First(), new[] { "dd-MM-yyyy", "dd.MM.yyyy" }, null,
                DateTimeStyles.None, out var date))
        {
            await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
            {
                Text =
                    "–ü–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ üòî: 'dd-MM-yyyy' –∏–ª–∏ 'dd.MM.yyyy'"
            }, cancellationToken);
            return;
        }

        if (date.Date > _dateTimeProvider.UtcDateTime.Date.AddHours(3).Date)
        {
            await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
            {
                Text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫—É—Ä—Å –Ω–∞ –±—É–¥—É—â—É—é –¥–∞—Ç—É. ‚òπÔ∏è"
            }, cancellationToken);
            return;
        }

        var rates = await _currencyService.GetCurrencyRatesToDate(
            date,
            cancellationToken);

        if (rates == null)
        {
            await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
            {
                Text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üòî"
            }, cancellationToken);
            return;
        }

        var sb = new StringBuilder();
        if (args.Length == 1)
        {
            sb.Append($"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üí≤ –Ω–∞ {date:dd-MM-yyyy}:\n");
            foreach (var rate in rates)
            {
                sb.Append(rate.GetString());
                sb.Append("\n");
            }

            await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
            {
                Text = sb.ToString(),
                ParseMode = ParseMode.Html
            }, cancellationToken);
        }
        else if (args.Length == 2)
        {
            sb.Append($"–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã üí≤ –Ω–∞ {date:dd-MM-yyyy}:\n");
            var rate = rates.FirstOrDefault(x =>
                args.Last().Equals(x.IsoCode, StringComparison.InvariantCultureIgnoreCase) ||
                args.Last().Equals(x.Name, StringComparison.InvariantCultureIgnoreCase) ||
                args.Last().Equals(x.Code, StringComparison.InvariantCultureIgnoreCase));

            if (rate == null)
                sb.Append($"–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã üí≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.Last()}");
            else
                sb.Append(rate.GetString());

            await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
            {
                Text = sb.ToString(),
                ParseMode = ParseMode.Html
            }, cancellationToken);
        }
        else
        {
            await _bot.SendMessageAsync(new TextMessage(update.Message.Chat)
            {
                Text =
                    "–í–≤–µ–¥–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ üòî: '/date –¥–∞—Ç–∞' –∏–ª–∏ '/date –¥–∞—Ç–∞ –∫–æ–¥_–≤–∞–ª—é—Ç—ã'.",
                ParseMode = ParseMode.Html
            }, cancellationToken);
        }
    }
}